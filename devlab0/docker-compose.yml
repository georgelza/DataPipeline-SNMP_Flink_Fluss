# if our project is called and network is called pipeline
#
# docker-compose -p pipeline up -d --build
# or
# export COMPOSE_PROJECT_NAME=pipeline
# docker-compose up -d --build
#
# inspect network: docker network inspect pipeline
#

configs:
  hive-site:
    file: ./conf/hive-site.xml
  flink-conf:
    file: ./conf/config.yaml

  log4j:
    file: ./conf/log4j.properties
  log4j-console:
    file: ./conf/log4j-console.properties
  log4j-session:
    file: ./conf/log4j-session.properties

  postgres_conf:
    file: ./conf/postgresql.conf
  postgres_hba:
    file: ./conf/pg_hba.conf

services:

  # begin Fluss cluster
  #
  # NOTE: the volumes are knowingly over configured... I'm mapping ./data/fluss
  # cs/fluss to /tp/fluss and cd/paimon to /tmp/paimon so that I can observe
  # what is written there.
  #
  # Fluss properties are added to the contents of server.yaml, see
  # https://alibaba.github.io/fluss-docs/docs/intro/  -> v0.7.0
  # https://alibaba.github.io/fluss-docs/docs/maintenance/configuration/
  #
  coordinator-server:
    image: fluss/fluss:0.7.0
    container_name: coordinator-server
    hostname: coordinator-server
    depends_on:
      - zookeeper
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          coordinator.host: coordinator-server  
          remote.data.dir: /tmp/fluss/remote-data
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss/cs/fluss:/tmp/fluss
      - ./data/fluss/cs/paimon:/tmp/paimon
      - ./creFlinkFlows:/shell
    command: coordinatorServer

  # https://alibaba.github.io/fluss-docs/docs/maintenance/tiered-storage/remote-storage/
  # By default, Fluss will copy local log segments to remote storage in every 1 minute
  # 
  tablet-server-0:
    image: fluss/fluss:0.7.0
    hostname: tablet-server-0
    container_name: tablet-server-0
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-0
          tablet-server.id: 0
          tablet-server.port: 9124
          log.segment.file-size: 10MB
          data.dir: /tmp/fluss/data
          remote.data.dir: /tmp/fluss/remote-data 
          kv.snapshot.interval: 0s
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss/ts0/fluss:/tmp/fluss
      - ./data/fluss/ts0/paimon:/tmp/paimon
    command: tabletServer

  tablet-server-1:
    image: fluss/fluss:0.7.0
    hostname: tablet-server-1
    container_name: tablet-server-1
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-1
          tablet-server.id: 1
          tablet-server.port: 9124
          log.segment.file-size: 10MB
          data.dir: /tmp/fluss/data
          remote.data.dir: /tmp/fluss/remote-data
          kv.snapshot.interval: 0s
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss/ts1/fluss:/tmp/fluss
      - ./data/fluss/ts1/paimon:/tmp/paimon
    command: tabletServer

  tablet-server-2:
    image: fluss/fluss:0.7.0
    hostname: tablet-server-2
    container_name: tablet-server-2
    depends_on:
      - coordinator-server
    environment:
      - |
        FLUSS_PROPERTIES=
          zookeeper.address: zookeeper:2181
          tablet-server.host: tablet-server-2
          tablet-server.id: 2
          tablet-server.port: 9124
          log.segment.file-size: 10MB
          data.dir: /tmp/fluss/data
          remote.data.dir: /tmp/fluss/remote-data
          kv.snapshot.interval: 0s
          datalake.format: paimon
          datalake.paimon.metastore: filesystem
          datalake.paimon.warehouse: /tmp/paimon
    volumes:
      - ./data/fluss/ts2/fluss:/tmp/fluss
      - ./data/fluss/ts2/paimon:/tmp/paimon
    command: tabletServer

  zookeeper:
    restart: always
    image: zookeeper:3.9.2
  # end Fluss cluster


  # begin Flink cluster
  jobmanager:
    image: ${REPO_NAME}/apacheflink-1.20.1-scala_2.12-java17:1.0.0
    hostname: jobmanager
    container_name: jobmanager
    ports:
      - 8083:8081
    environment:
      - ENV_ROOTLOG_LEVEL=DEBUG
      - ENV_FLINKLOG_LEVEL=DEBUG
      - ENV_SNMPLOG_LEVEL=DEBUG      
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        rest.bind-address: 0.0.0.0

    volumes:
      - ./data/paimon:/tmp/paimon
      - ./creFlinkFlows:/sql

      - ./data/flink/logs:/opt/flink/log
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/rocksdb:/opt/flink/rocksdb
      - ./data/flink/jm/tmp:/tmp

      - ./conf/flink/lib/hive:/opt/flink/lib/hive
      - ./conf/flink/lib/fluss:/opt/flink/lib/fluss
      - ./conf/flink/lib/flink:/opt/flink/lib/flink
      - ./conf/flink/opt/fluss-flink-tiering-0.7.0.jar:/opt/flink/opt/fluss-flink-tiering-0.7.0.jar

    configs:
      - source: flink-conf
        target: /opt/flink/conf/config.yaml
      - source: hive-site
        target: /opt/flink/conf/hive-site.xml
      - source: hive-site
        target: /opt/sql-client/conf/hive-site.xml
      - source: log4j
        target: /opt/flink/conf/log4j.properties
      - source: log4j-console
        target: /opt/flink/conf/log4j-console.properties
      - source: log4j-session
        target: /opt/flink/conf/log4j-session.properties
    command: jobmanager

  taskmanager:
    image: ${REPO_NAME}/apacheflink-1.20.1-scala_2.12-java17:1.0.0
    depends_on:
      - jobmanager
    deploy:
      replicas: 2
    environment:
      - ENV_ROOTLOG_LEVEL=DEBUG
      - ENV_FLINKLOG_LEVEL=DEBUG
      - ENV_SNMPLOG_LEVEL=DEBUG      
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        rest.bind-address: 0.0.0.0
        
    volumes:
      - ./data/paimon:/tmp/paimon

      - ./data/flink/logs:/opt/flink/log
      - ./data/flink/checkpoints:/opt/flink/checkpoints
      - ./data/flink/rocksdb:/opt/flink/rocksdb
      - ./data/flink/tm/tmp:/tmp

      - ./conf/flink/lib/hive:/opt/flink/lib/hive
      - ./conf/flink/lib/fluss:/opt/flink/lib/fluss
      - ./conf/flink/lib/flink:/opt/flink/lib/flink
      - ./conf/flink/opt/fluss-flink-tiering-0.7.0.jar:/opt/flink/opt/fluss-flink-tiering-0.7.0.jar

    configs:
      - source: flink-conf
        target: /opt/flink/conf/config.yaml
      - source: hive-site
        target: /opt/flink/conf/hive-site.xml
      - source: hive-site
        target: /opt/sql-client/conf/hive-site.xml
      - source: log4j
        target: /opt/flink/conf/log4j.properties
      - source: log4j-console
        target: /opt/flink/conf/log4j-console.properties
      - source: log4j-session
        target: /opt/flink/conf/log4j-session.properties
    command: taskmanager
  # end Flink cluster


  # Datastore for Hive Metastore 
  postgres:
    image: ${REPO_NAME}/postgres-12.0:1.0.0
    hostname: ${DATABASE_HOST}
    container_name: ${DATABASE_HOST}
    restart: unless-stopped
    ports:
      - ${DATABASE_PORT}:5432
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_ROOT_PASSWORD=${DATABASE_ROOT_PASSWORD}
      - POSTGRES_DB=${DATABASE_DB}

    healthcheck:
      test: ["CMD", "psql", "-U", "${DATABASE_USER}", "${DATABASE_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

    volumes:
      - ./data/postgres_hms:/var/lib/postgresql/data
    configs:
      - source: postgres_conf
        target: /etc/postgresql/postgresql.conf
      - source: postgres_hba
        target: /etc/postgresql/data/pg_hba.conf
    command: -c config_file=/etc/postgresql/postgresql.conf


  # Hive Metastore 3.1.3
  # HADOOP_VERSION=3.3.5
  # POSTGRES_CONNECTOR_VERSION=42.7.3
  #
  # Launch Standalone Metastore With External RDBMS (Postgres)
  # If you want to use your own core-site.xml/hdfs-site.xml/yarn-site.xml or hive-site.xml for the service, 
  # you can provide the environment variable HIVE_CUSTOM_CONF_DIR for the command. For example:
  # Put the custom configuration file under the directory /opt/hive/conf and run:
  metastore:
    image: ${REPO_NAME}/hive-metastore-3.1.3-java8:1.0.0
    hostname: metastore
    container_name: metastore
    restart: unless-stopped
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: ${DATABASE_TYPE_JDBC}
      IS_RESUME: "true"
      SERVICE_OPTS: '-Xmx512m 
                    -Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver
                    -Djavax.jdo.option.ConnectionURL=jdbc:${DATABASE_TYPE_JDBC}://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}?sslmode=disable
                    -Djavax.jdo.option.ConnectionUserName=${DATABASE_USER}
                    -Djavax.jdo.option.ConnectionPassword=${DATABASE_PASSWORD}'
    env_file:
      - ./conf/hive.env
    ports:
      - 9083:9083   # Hive Metastore access port
    depends_on:
      - postgres
#      - mc
    command: hivemetastore


  # Using HS2 with Standalone/Remote Metastore
  # "-Dhive.metastore.uris is used to specify the external Metastore
  # NOTE: To save the data between container restarts, you can start the HiveServer2 with mounted volume:
  hiveserver2:
    image: ${REPO_NAME}/hive-hiveserver2-3.1.3-java8:1.0.0
    hostname: hiveserver2
    container_name: hiveserver2
    restart: unless-stopped
    environment:
      - SERVICE_NAME=hiveserver2
      - IS_RESUME="true"
      - SERVICE_OPTS='-Xmx512m 
                    -Dhive.metastore.uris=thrift://metastore:9083'
    env_file:
      - ./conf/hive.env
    ports:
      - 10000:10000   # Hive server2 port
      - 10001:10001
      - 10002:10002   # HiveServer2 Web UI
    depends_on:
      - metastore
    command: hiveserver


  # Datastore for snmp 
  postgressnmp:
    image: ${REPO_NAME}/postgres-12.0:1.0.0
    hostname: ${PGSQLSNMP_HOST}
    container_name: ${PGSQLSNMP_HOST}
    restart: unless-stopped
    ports:
      - ${PGSQLSNMP_PORT}:5432
    environment:
      - POSTGRES_USER=${PGSQLSNMP_USER}
      - POSTGRES_PASSWORD=${PGSQLSNMP_PASSWORD}
      - POSTGRES_ROOT_PASSWORD= ${PGSQLSNMP_ROOT_PASSWORD}
      - POSTGRES_DB=${PGSQLSNMP_DB}

    healthcheck:
      test: ["CMD", "psql", "-U", "${PGSQLSNMP_USER}", "${PGSQLSNMP_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

    volumes:
      - ./data/postgres_snmp:/var/lib/postgresql/data
      - ./conf/snmp.sql:/docker-entrypoint-initdb.d/init.sql

    configs:
      - source: postgres_conf
        target: /etc/postgresql/postgresql.conf
      - source: postgres_hba
        target: /etc/postgresql/data/pg_hba.conf
    command: -c config_file=/etc/postgresql/postgresql.conf


  mysqlsnmp: 
    image: mysql:8.4	
    hostname: ${MYSQLSNMP_HOST}
    container_name: ${MYSQLSNMP_HOST}
    restart: unless-stopped
    environment:
      MYSQL_USER: ${MYSQLSNMP_USER} 
      MYSQL_PASSWORD: ${MYSQLSNMP_PASSWORD} 
      MYSQL_ROOT_PASSWORD: ${MYSQLSNMP_USER}
      MYSQL_DATABASE: ${MYSQLSNMP_DB} 
    ports:
      - ${MYSQLSNMP_PORT}:3306
    volumes:
      - ./data/mysql_snmp:/var/lib/mysql

# Without a network explicitly defined, you hit this Hive/Thrift error
# java.net.URISyntaxException Illegal character in hostname
# https://github.com/TrivadisPF/platys-modern-data-platform/issues/231
networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}
